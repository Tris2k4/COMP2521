Question 6

Which of the data structures is most suitable? Justify your answer.
You must use time complexities as a basis for your justification.

Ordered Linked List - good for print in order but the time to insert the key element is O(n) since we are trying to keep it in order.

Ordered Array - same as ordered linked list but inefficient running time for pushing stuff in since we are trying to keep the items in order, therefore worst case running time could be O(n)

AVL Tree - This can be the most suitable since push and pop only cost O(logn) running time and if we want to print in order then we can perform a in-order traversal to get the correct order we want

Hash Table - Although it is efficient in pushing and popping things out since the average running time of a hash table in push and pop are O(1) (assuming we have a good hash function). However, it is inefficient to get the key-element in-order as we have to search for it in the hash. Hence, inefficient for printinorder

Heap - Good for push and pop since the time complexity of push and pop of heap is O(logn) like AVL tree. However, the heap doesn't contain the property like AVL tree which is smaller elements on the left and bigger elements on the right so this will be inefficient in printing in order



